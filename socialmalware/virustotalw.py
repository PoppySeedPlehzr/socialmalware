"""

Nick Anderosn - 03/01/2015

Virus Total Submission Wrapper
This program submits samples to VirusTotal and returns the report if it
exists. Otherwise it uploads the file and has VT scan the file, and then
returns the report.

"""
import sys
sys.path.insert(0,"./util")
import postfile
import urllib3
import hashlib
import time
import json
import argparse

from config import *

class VTWrapper:
    debug   = True
    fname   = ''
    fbuffer = ''
    digest  = ''
    baseurl = "https://www.virustotal.com/vtapi/v2/file/"
    sleeptime = 45
    http = urllib3.PoolManager()

    # Constructor for VT Wrapper class.  Is it really necessary to give the hash?
    def __init__(self, fname, dbg=False):
        self.debug   = dbg
        self.fname   = fname
        self.fbuffer = open(self.fname, 'rb').read()
        self.digest  = hashlib.sha256(self.fbuffer).hexdigest()

    # Function which performs the main submission to VirusTotal
    def submit(self):
        # Attempt to get the report from VT
        resp = self.http.request_encode_url('GET', self.baseurl+"report", fields={"resource":self.digest, "apikey":VTAPIKEY})
        if resp.status == 200: # Request went through
            resp = json.loads(resp.data)

            # If the report was indeed present and it could be retrieved it will be 1
            if resp['response_code'] == 1:
                if self.debug: LOG("[+] VT: Sample found! Report submitted on {}".format(time.strftime("%D %H:%M:%S",time.localtime(report_time))))
                return resp

            # The sample is not present. Submit it and wait for the report.
            elif resp['response_code'] == 0:
                fields = [("apikey", VTAPIKEY)]
                files = [("file", self.fname, self.fbuffer)]
                # Unfortunately, this still seems to be the easiest way to submit : \
                resp = json.loads(postfile.post_multipart("www.virustotal.com", self.baseurl+"scan", fields, files))

                # Wait for the scan to complete.
                while resp['response_code'] == -2:
                    if self.debug: LOG("[-] VT: Report is not ready. Sleeping for 2 minutes.")
                    time.sleep(self.sleeptime)
                    resp = self.http.request_encode_url('GET', self.baseurl+"report", fields={"resource":self.digest, "apikey":VTAPIKEY})
                    resp = json.loads(resp.data)

            # The file is currently being analyzed. Wait for finish.
            elif resp['response_code'] == -2:
                while resp['response_code'] == -2:
                    if self.debug: LOG("[-] VT: Report is not ready. Sleeping for {} minutes.".format(self.sleeptime))
                    time.sleep(self.sleeptime)
                    resp = self.http.request_encode_url('GET', self.baseurl+"report", fields={"resource":self.digest, "apikey":VTAPIKEY})
                    resp = json.loads(resp.data)

            # If the response code isn't 0, 1, or -2, then it's not currently defined by the VT API doc.
            else:
                if self.debug: LOG("[-] VT: Undefined response code from API.")
                resp = {}

            # Return the response of the scan in a JSON format.
            if self.debug: LOG("[+] VT: Completed scanning sample. Returning Report.")
        else:
            if self.debug: LOG("[-] VT: Unable to reach VirusTotal.  Please check network connectivity.")
            resp = {}
        return resp

# For Standalone submissions
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="File with which to query VT")
    parser.add_argument("--debug", default=False, help="Turn on verbosity of VT submission")

    args = parser.parse_args()
    vt = VTWrapper(args.file, args.debug)
    print json.dumps(vt.submit())
